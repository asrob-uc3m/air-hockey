import cv2
import numpy
import math

class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__hsv_threshold_0_hue = [29.136690647482013, 152.35494880546074]
        self.__hsv_threshold_0_saturation = [180.0, 255.0]
        self.__hsv_threshold_0_value = [0.0, 255.0]

        self.hsv_threshold_0_output = None


        self.__hsv_threshold_1_hue = [0.0, 180.0]
        self.__hsv_threshold_1_saturation = [176.57374100719426, 255.0]
        self.__hsv_threshold_1_value = [0.0, 255.0]

        self.hsv_threshold_1_output = None

        self.__cv_bitwise_xor_src1 = self.hsv_threshold_0_output
        self.__cv_bitwise_xor_src2 = self.hsv_threshold_1_output

        self.cv_bitwise_xor_output = None

        self.__cv_medianblur_src = self.cv_bitwise_xor_output
        self.__cv_medianblur_ksize = 3.0

        self.cv_medianblur_output = None

        self.__find_blobs_input = self.cv_medianblur_output
        self.__find_blobs_min_area = 30.0
        self.__find_blobs_circularity = [0.0, 1.0]
        self.__find_blobs_dark_blobs = False

        self.output = None


    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step HSV_Threshold0:
        self.__hsv_threshold_0_input = source0
        (self.hsv_threshold_0_output) = self.__hsv_threshold(self.__hsv_threshold_0_input, self.__hsv_threshold_0_hue, self.__hsv_threshold_0_saturation, self.__hsv_threshold_0_value)

        # Step HSV_Threshold1:
        self.__hsv_threshold_1_input = source0
        (self.hsv_threshold_1_output) = self.__hsv_threshold(self.__hsv_threshold_1_input, self.__hsv_threshold_1_hue, self.__hsv_threshold_1_saturation, self.__hsv_threshold_1_value)

        # Step CV_bitwise_xor0:
        self.__cv_bitwise_xor_src1 = self.hsv_threshold_0_output
        self.__cv_bitwise_xor_src2 = self.hsv_threshold_1_output
        (self.cv_bitwise_xor_output) = self.__cv_bitwise_xor(self.__cv_bitwise_xor_src1, self.__cv_bitwise_xor_src2)

        # Step CV_medianBlur0:
        self.__cv_medianblur_src = self.cv_bitwise_xor_output
        (self.cv_medianblur_output) = self.__cv_medianblur(self.__cv_medianblur_src, self.__cv_medianblur_ksize)



    @staticmethod
    def __hsv_threshold(input, hue, sat, val):
        """Segment an image based on hue, saturation, and value ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HSV)
        return cv2.inRange(out, (hue[0], sat[0], val[0]),  (hue[1], sat[1], val[1]))

    @staticmethod
    def __cv_bitwise_xor(src1, src2):
        """Computes the per channel exclusive or of two images.
        Args:
            src1: A numpy.ndarray.
        Returns:
            The inverse of the numpy.ndarray.
        """
        return cv2.bitwise_xor(src1, src2)

    @staticmethod
    def __cv_medianblur(src, k_size):
        """Performs a median blur on the image.
        Args:
            src: A numpy.ndarray.
            k_size: the scaling factor for the blur as a number.
        Returns:
            The result as a numpy.ndarray.
        """
        return cv2.medianBlur(src, (int)(k_size))



