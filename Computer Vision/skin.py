import cv2
import numpy
import math

class Skin:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        """
        self.__hsv_threshold_hue = [0.0, 55.59726962457334]
        self.__hsv_threshold_saturation = [25.22482014388489, 196.2542662116041]
        self.__hsv_threshold_value = [52.74280575539568, 144.0358361774744]
        """

        self.__hsv_threshold_hue_white = [0, 180]
        self.__hsv_threshold_saturation_white = [0, 50]
        self.__hsv_threshold_value_white = [120, 255]

        self.__hsv_threshold_hue_blue = [60, 130]
        self.__hsv_threshold_saturation_blue = [20, 255]
        self.__hsv_threshold_value_blue = [40, 255]

        self.output = None


    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step HSV_Threshold0:
        self.__hsv_threshold_input = source0
        self.output_white = self.__hsv_threshold(self.__hsv_threshold_input, self.__hsv_threshold_hue_white,
                                                                             self.__hsv_threshold_saturation_white,
                                                                             self.__hsv_threshold_value_white)
        self.output_blue = self.__hsv_threshold(self.__hsv_threshold_input, self.__hsv_threshold_hue_blue,
                                                                            self.__hsv_threshold_saturation_blue,
                                                                            self.__hsv_threshold_value_blue)

        self.output_all = cv2.bitwise_or(self.output_white, self.output_blue)

        (self.output) = cv2.medianBlur(self.output_all, 3)
        # self.__hsv_threshold(self.__hsv_threshold_input, self.__hsv_threshold_hue, self.__hsv_threshold_saturation, self.__hsv_threshold_value)

    @staticmethod
    def __hsv_threshold(input, hue, sat, val):
        """Segment an image based on hue, saturation, and value ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HSV)
        return cv2.inRange(out, (hue[0], sat[0], val[0]),  (hue[1], sat[1], val[1]))



